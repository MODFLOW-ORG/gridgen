name: gridgen compiler checks
on:
  # run at 6 AM UTC every day
  schedule:
    - cron: '0 6 * * *' 
  push:
  pull_request:
    branches:
      - main
      - develop
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  PIXI_BETA_WARNING_OFF: true
jobs:
  test:
    name: Build and Test on ${{ matrix.os }} with ${{ matrix.compiler }} ${{ matrix.version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # test latest gcc
          - {os: ubuntu-latest, compiler: gcc, version: 13, shell: bash, release: no}
          - {os: macos-14, compiler: gcc, version: 13, shell: bash, release: yes}
          - {os: windows-latest, compiler: gcc, version: 13, shell: pwsh, release: no}
          # test intel-classic
          - {os: ubuntu-22.04, compiler: intel-classic, version: 2021.7, shell: bash, release: no}
          - {os: macos-13, compiler: intel-classic, version: 2021.7, shell: bash, release: yes}
          # test previous gcc
          - {os: ubuntu-latest, compiler: gcc, version: 12, shell: bash, release: no}
          - {os: ubuntu-latest, compiler: gcc, version: 11, shell: bash, release: no}
          # test ifx
          - {os: ubuntu-22.04, compiler: intel, version: "2025.0", shell: bash, release: yes}
          - {os: windows-2022, compiler: intel, version: "2025.0", shell: pwsh, release: yes}
    defaults:
      run:
        shell: ${{ matrix.shell }}
    steps:
      - name: Checkout gridgen
        uses: actions/checkout@v5
        with:
          path: gridgen

      - uses: maxim-lobanov/setup-xcode@v1
        if: ${{ (runner.os == 'macOS') && (matrix.compiler == 'intel-classic') }}
        with:
          xcode-version: "14.3.1"

      - name: Setup ${{ matrix.compiler }} ${{ matrix.version }} on ${{ matrix.os }}
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: ${{ matrix.compiler}}
          version: ${{ matrix.version }}
          
      - name: Setup pixi
        uses: prefix-dev/setup-pixi@v0.8.14
        with:
          pixi-version: v0.41.4
          manifest-path: "gridgen/pixi.toml"

      - name: Set ZIPFILENAME
        if: matrix.release == 'yes'
        shell: bash
        working-directory: gridgen
        id: ostag
        run: |
          ostag=$(pixi run get-ostag)
          zipfilename="${ostag}.zip"
          echo "ZIPFILENAME=$zipfilename" >> $GITHUB_OUTPUT

      - name: Build gridgen
        working-directory: gridgen
        run: |
          pixi run setup
          pixi run build

      - name: Show build log
        if: failure()
        working-directory: gridgen
        run: cat builddir/meson-logs/meson-log.txt
      
      - name: Upload build log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: meson-log.txt
          path: gridgen/builddir/meson-logs/meson-log.txt
    
      - name: Unit test gridgen
        if: success()
        working-directory: gridgen
        run: |
          pixi run test-initial
          pixi run test-write
          pixi run test-shapefile
          pixi run test-intersect
          pixi run test-vtk

      - name: Build ${{ env.ZIPFILENAME }}.zip on ${{ matrix.os }}
        if: matrix.release == 'yes'
        shell: bash
        working-directory: gridgen
        run: |
          zip -r $ZIPFILENAME bin/
          ls -lha .

      - name: Upload Release Asset
        if: matrix.release == 'yes'
        uses: softprops/action-gh-release@v2
        with:
          files: gridgen/*.zip # Path to your artifact
          tag_name: '1.0.02'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}